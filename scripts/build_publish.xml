<!-- build_publish.xml

Description:
	This ANT script publishes installers and build artifacts to s:/build.
	
	To use this script, you must update properties is <project root>/scripts/build.properties or overide 
	them from commandline (using -D option). For example:
		
		set PATH=C:\depot\external\apache-ant\apache-ant-1.8.4\bin;%PATH%
		ant -XX:MaxPermSize=512m -Dnlbuildroot=C:/depot/PolicyStudio/dev/BuildScript_1205 -Dexternal.dir=c:/depot/external -Dnlexternaldir=c:/depot/external -Dbuild_number=10001 -f scripts/build_publish.xml
		
	or
		
		set PATH=C:\depot\external\apache-ant\apache-ant-1.8.4\bin;%PATH%
		set ANT_OPTS=-XX:MaxPermSize=512m -Dnlbuildroot=%NLBUILDROOT% -Dexternal.dir=%NLEXTERNALDIR% -Dnlexternaldir=%NLEXTERNALDIR% -Dbuild_number=10001 
		ant -f scripts/build_publish.xml -v	
-->

<project name="build_publish" default="all" basedir=".">

	<!-- Debug 
	<echoproperties />
	<fail message="INFO: Debug" />
	-->

	<!-- Initialization tasks -->
	<tstamp />

	<!-- Propery files and environment -->
	<property file="${basedir}/build.properties" />
	<property environment="env" />
	
	<!-- Global properties -->
	<property name="publish_path" value="SKYDRM_EAPPlugin" />
	<property name="xlib_dir" location="${nlbuildroot}/xlib" />
	<property name="build_dir" location="${nlbuildroot}/build" />
	<property name="publish_local_dist_dir" location="${repository_root}/plugins/${publish_path}/${version_str}/${version_build_short}" />
	<property name="publish_local_artifact_dir" location="${repository_root}/artifacts/${publish_path}/${version_str}/${version_build_short}" />

	<property name="zip_file_name_prefix" value="${package_name}-${version_str}-${version_build_short}-${build_date_long}" />
	<property name="zip_file_xlib" value="${publish_local_artifact_dir}/${zip_file_name_prefix}-xlib.zip" />
	<property name="zip_file_build" value="${publish_local_artifact_dir}/${zip_file_name_prefix}-build.zip" />
<!--added today 03/04 -->
	<property name="build_manifest_file" value="${nlbuildroot}/build.manifest" />
	<!-- Dump properties -->
	<echoproperties />

	<echo message="INFO: Dump properties completed" />

	<!-- Sanity checks -->
	<fail message="nlbuildroot is not set" unless="nlbuildroot" />
	<fail message="nlbuildroot is empty">
		<condition>
			<equals arg1="${nlbuildroot}" arg2="" trim="true" />
		</condition>
	</fail>
	<available file="${nlbuildroot}" type="dir" property="local.nlbuildroot_exists" />
	<fail message="nlbuildroot directory does not exist - ${nlbuildroot}" unless="local.nlbuildroot_exists" />

	<fail message="version_str is not set" unless="version_str" />
	<fail message="version_str is empty">
		<condition>
			<equals arg1="${version_str}" arg2="" trim="true" />
		</condition>
	</fail>

	<fail message="build_number is not set" unless="build_number" />
	<fail message="build_number is empty">
		<condition>
			<equals arg1="${build_number}" arg2="" trim="true" />
		</condition>
	</fail>

	<fail message="version_build_short is not set" unless="version_build_short" />
	<fail message="version_build_short is empty">
		<condition>
			<equals arg1="${version_build_short}" arg2="" trim="true" />
		</condition>
	</fail>

	<fail message="build_date_long is not set" unless="build_date_long" />
	<fail message="build_date_long is empty">
		<condition>
			<equals arg1="${build_date_long}" arg2="" trim="true" />
		</condition>
	</fail>

	<fail message="repository_root is not set" unless="repository_root" />
	<fail message="repository_root is empty">
		<condition>
			<equals arg1="${repository_root}" arg2="" trim="true" />
		</condition>
	</fail>
	<available file="${repository_root}" type="dir" property="local.repository_root_exists" />
	<fail message="repository_root directory does not exist - ${repository_root}" unless="local.repository_root_exists" />

	<!-- Targets -->
	<target name="all" depends="product, archive" />

	<target name="product" depends="UserAttributePlugin" />

	<target name="UserAttributePlugin">
		<!-- Check for errors -->
		<fail message="Cannot find installer package">
			<condition>
				<resourcecount count="0" when="equal">
					<fileset dir="${build_dir}">
						<include name="${package_name}-*.zip" />
					</fileset>
				</resourcecount>
			</condition>
		</fail>
		
		<!-- Copy files -->
		<mkdir dir="${publish_local_dist_dir}" />
		<fileset id="installer_zip_files" dir="${build_dir}">
			<include name="${package_name}-*.zip" />
			<include name="${package_name_sol}-*.zip" />
		</fileset>
		<copy todir="${publish_local_dist_dir}">
			<fileset refid="installer_zip_files" />
		</copy>
		<echo message="[BUILD MANIFEST]   Product Name       : UserAttribute Plugin" />
		<echo message="[BUILD MANIFEST]   Installer Location : ${publish_local_dist_dir}" />
		<echo message="[BUILD MANIFEST]   Installer Package  : ${toString:installer_zip_files}" />
	</target>

	<target name="archive" depends="archive_xlib, archive_build" />

	<target name="archive_xlib">
		<!-- Check for errors -->
		<available file="${xlib_dir}" type="dir" property="local.xlib_exists" />
		<fail message="Missing xlib directory - ${xlib_dir}" unless="local.xlib_exists" />
		
		<!-- Zip up directory -->
		<mkdir dir="${publish_local_artifact_dir}" />
		<delete file="${zip_file_xlib}" />
		<zip destfile="${zip_file_xlib}" basedir="${xlib_dir}" update="false" />
		<echo message="[BUILD MANIFEST] Archive: ${zip_file_xlib}" />
	</target>

	<target name="archive_build">
		<!-- Check for errors -->
		<available file="${build_dir}" type="dir" property="local.build_exists" />
		<fail message="Missing build directory - ${build_dir}" unless="local.build_exists" />

		<!-- Copy config and log files -->
		<copy file="${nlbuildroot}/scripts/build.properties" todir="${build_dir}" preservelastmodified="true" overwrite="false" verbose="true" />
		<copy todir="${build_dir}" preservelastmodified="true" overwrite="false" verbose="true">
			<fileset dir="${nlbuildroot}">
				<include name="build.config*" />
				<include name="build*.log" />
			</fileset>
		</copy>

		<!-- Zip up directory -->
		<mkdir dir="${publish_local_artifact_dir}" />
		<delete file="${zip_file_build}" />
		<zip destfile="${zip_file_build}" basedir="${build_dir}" excludes="${package_name}-*.zip" update="false" />
		<echo message="[BUILD MANIFEST] Archive: ${zip_file_build}" />
	</target>

	<target name="manifest">
		<!-- Check for errors -->
		<available file="${build_manifest_file}" type="file" property="local.manifest_exists" />
		<fail message="Missing manifest file - ${build_manifest_file}" unless="local.manifest_exists" />

		<!-- Copy file -->
		<mkdir dir="${publish_local_artifact_dir}" />
		<copy file="${build_manifest_file}" todir="${publish_local_artifact_dir}" preservelastmodified="true" overwrite="true" verbose="true" />
	</target>
</project>
